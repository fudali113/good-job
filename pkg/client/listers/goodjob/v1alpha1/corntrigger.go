/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/fudali113/good-job/pkg/apis/goodjob/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CornTriggerLister helps list CornTriggers.
type CornTriggerLister interface {
	// List lists all CornTriggers in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.CornTrigger, err error)
	// CornTriggers returns an object that can list and get CornTriggers.
	CornTriggers(namespace string) CornTriggerNamespaceLister
	CornTriggerListerExpansion
}

// cornTriggerLister implements the CornTriggerLister interface.
type cornTriggerLister struct {
	indexer cache.Indexer
}

// NewCornTriggerLister returns a new CornTriggerLister.
func NewCornTriggerLister(indexer cache.Indexer) CornTriggerLister {
	return &cornTriggerLister{indexer: indexer}
}

// List lists all CornTriggers in the indexer.
func (s *cornTriggerLister) List(selector labels.Selector) (ret []*v1alpha1.CornTrigger, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CornTrigger))
	})
	return ret, err
}

// CornTriggers returns an object that can list and get CornTriggers.
func (s *cornTriggerLister) CornTriggers(namespace string) CornTriggerNamespaceLister {
	return cornTriggerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CornTriggerNamespaceLister helps list and get CornTriggers.
type CornTriggerNamespaceLister interface {
	// List lists all CornTriggers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.CornTrigger, err error)
	// Get retrieves the CornTrigger from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.CornTrigger, error)
	CornTriggerNamespaceListerExpansion
}

// cornTriggerNamespaceLister implements the CornTriggerNamespaceLister
// interface.
type cornTriggerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CornTriggers in the indexer for a given namespace.
func (s cornTriggerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CornTrigger, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CornTrigger))
	})
	return ret, err
}

// Get retrieves the CornTrigger from the indexer for a given namespace and name.
func (s cornTriggerNamespaceLister) Get(name string) (*v1alpha1.CornTrigger, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("corntrigger"), name)
	}
	return obj.(*v1alpha1.CornTrigger), nil
}
